// Generated by svd2swift.

import MMIO

/// Universal synchronous asynchronous receiver
/// transmitter
@RegisterBlock
struct UART5 {
    /// Status register
    @RegisterBlock(offset: 0x0)
    var sr: Register<SR>

    /// Data register
    @RegisterBlock(offset: 0x4)
    var dr: Register<DR>

    /// Baud rate register
    @RegisterBlock(offset: 0x8)
    var brr: Register<BRR>

    /// Control register 1
    @RegisterBlock(offset: 0xc)
    var cr1: Register<CR1>

    /// Control register 2
    @RegisterBlock(offset: 0x10)
    var cr2: Register<CR2>

    /// Control register 3
    @RegisterBlock(offset: 0x14)
    var cr3: Register<CR3>
}

extension UART5 {
    /// Status register
    @Register(bitWidth: 32)
    struct SR {
        /// LIN break detection flag
        @ReadWrite(bits: 8..<9)
        var lbd: LBD

        /// Transmit data register
        /// empty
        @ReadOnly(bits: 7..<8)
        var txe: TXE

        /// Transmission complete
        @ReadWrite(bits: 6..<7)
        var tc: TC

        /// Read data register not
        /// empty
        @ReadWrite(bits: 5..<6)
        var rxne: RXNE

        /// IDLE line detected
        @ReadOnly(bits: 4..<5)
        var idle: IDLE

        /// Overrun error
        @ReadOnly(bits: 3..<4)
        var ore: ORE

        /// Noise detected flag
        @ReadOnly(bits: 2..<3)
        var nf: NF

        /// Framing error
        @ReadOnly(bits: 1..<2)
        var fe: FE

        /// Parity error
        @ReadOnly(bits: 0..<1)
        var pe: PE
    }

    /// Data register
    @Register(bitWidth: 32)
    struct DR {
        /// Data value
        @ReadWrite(bits: 0..<9)
        var dr_field: DR_FIELD
    }

    /// Baud rate register
    @Register(bitWidth: 32)
    struct BRR {
        /// mantissa of USARTDIV
        @ReadWrite(bits: 4..<16)
        var div_mantissa: DIV_Mantissa

        /// fraction of USARTDIV
        @ReadWrite(bits: 0..<4)
        var div_fraction: DIV_Fraction
    }

    /// Control register 1
    @Register(bitWidth: 32)
    struct CR1 {
        /// Oversampling mode
        @ReadWrite(bits: 15..<16)
        var over8: OVER8

        /// USART enable
        @ReadWrite(bits: 13..<14)
        var ue: UE

        /// Word length
        @ReadWrite(bits: 12..<13)
        var m: M

        /// Wakeup method
        @ReadWrite(bits: 11..<12)
        var wake: WAKE

        /// Parity control enable
        @ReadWrite(bits: 10..<11)
        var pce: PCE

        /// Parity selection
        @ReadWrite(bits: 9..<10)
        var ps: PS

        /// PE interrupt enable
        @ReadWrite(bits: 8..<9)
        var peie: PEIE

        /// TXE interrupt enable
        @ReadWrite(bits: 7..<8)
        var txeie: TXEIE

        /// Transmission complete interrupt
        /// enable
        @ReadWrite(bits: 6..<7)
        var tcie: TCIE

        /// RXNE interrupt enable
        @ReadWrite(bits: 5..<6)
        var rxneie: RXNEIE

        /// IDLE interrupt enable
        @ReadWrite(bits: 4..<5)
        var idleie: IDLEIE

        /// Transmitter enable
        @ReadWrite(bits: 3..<4)
        var te: TE

        /// Receiver enable
        @ReadWrite(bits: 2..<3)
        var re: RE

        /// Receiver wakeup
        @ReadWrite(bits: 1..<2)
        var rwu: RWU

        /// Send break
        @ReadWrite(bits: 0..<1)
        var sbk: SBK
    }

    /// Control register 2
    @Register(bitWidth: 32)
    struct CR2 {
        /// LIN mode enable
        @ReadWrite(bits: 14..<15)
        var linen: LINEN

        /// STOP bits
        @ReadWrite(bits: 12..<14)
        var stop: STOP

        /// LIN break detection interrupt
        /// enable
        @ReadWrite(bits: 6..<7)
        var lbdie: LBDIE

        /// lin break detection length
        @ReadWrite(bits: 5..<6)
        var lbdl: LBDL

        /// Address of the USART node
        @ReadWrite(bits: 0..<4)
        var add: ADD
    }

    /// Control register 3
    @Register(bitWidth: 32)
    struct CR3 {
        /// One sample bit method
        /// enable
        @ReadWrite(bits: 11..<12)
        var onebit: ONEBIT

        /// DMA enable transmitter
        @ReadWrite(bits: 7..<8)
        var dmat: DMAT

        /// DMA enable receiver
        @ReadWrite(bits: 6..<7)
        var dmar: DMAR

        /// Half-duplex selection
        @ReadWrite(bits: 3..<4)
        var hdsel: HDSEL

        /// IrDA low-power
        @ReadWrite(bits: 2..<3)
        var irlp: IRLP

        /// IrDA mode enable
        @ReadWrite(bits: 1..<2)
        var iren: IREN

        /// Error interrupt enable
        @ReadWrite(bits: 0..<1)
        var eie: EIE
    }
}
